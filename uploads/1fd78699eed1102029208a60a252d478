const express = require('express')
const app = express()
const bodyParser = require('body-parser')
const dotenv = require('dotenv').config()
const cors = require('cors')
const mongodb = require('mongodb')
const mongoose = require('mongoose')
const randomstring = require("randomstring")
const userDB = require("./models/userDB")


mongoose.connect(process.env.MLAB_URI || 'mongodb://localhost/userdbs')

app.use(cors())

app.use(bodyParser.urlencoded({ extended: false }))
app.use(bodyParser.json())


app.use(express.static('public'))
app.get('/', (req, res) => {
    res.sendFile(__dirname + '/views/index.html')
});

app.post("/api/exercise/new-user/", (req, res) => {
    let username = req.body.username;
    let idUser = randomstring.generate(6);

    userDB.findOne({ "user_name": { $eq: username } }, (err, doc) => {

        if (username === "") {
            res.json({
                error: "Username required"
            })
        } else if (doc) {
            return res.send('User already exists')
        } else {
            let newUser = new userDB({
                user_name: username,
                _id: idUser,
                exerc_desc: "",
                exerc_dura: "",
                exerc_date: ""
            });
            newUser.save((err, url) => {
                res.json({
                    user_name: username,
                    _id: idUser
                })
            });
        }
    });
});
// Not found middleware
app.use((req, res, next) => {
    return next({ status: 404, message: 'not found' })
})

// Error Handling middleware
app.use((err, req, res, next) => {
    let errCode, errMessage

    if (err.errors) {
        // mongoose validation error
        errCode = 400 // bad request
        const keys = Object.keys(err.errors)
            // report the first validation error
        errMessage = err.errors[keys[0]].message
    } else {
        // generic or custom error
        errCode = err.status || 500
        errMessage = err.message || 'Internal Server Error'
    }
    res.status(errCode).type('txt')
        .send(errMessage)
})

const listener = app.listen(process.env.PORT || 3000, () => {
    console.log('Your app is listening on port ' + listener.address().port)
})